import telebot
import random
import config

bot = telebot.TeleBot(config.API_TOKEN)

ID = []


@bot.message_handler(commands=["start"])
def welcome_user(message):
    markup_inline = telebot.types.InlineKeyboardMarkup(row_width=1)
    #  todo replace link to user's channel
    subscribe = telebot.types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                                                   url="youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstleyVEVO")
    markup_inline.add(subscribe)
    cont_watching = telebot.types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="followed")
    markup_inline.add(cont_watching)
    if message.from_user.first_name is None:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.last_name}!".
                         format(message.from_user), reply_markup=markup_inline)
    elif message.from_user.last_name is None:    
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!".
                         format(message.from_user), reply_markup=markup_inline)
    else:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name} {0.last_name}!".
                         format(message.from_user, message.from_user), reply_markup=markup_inline)
    print(message.from_user.id)


@bot.callback_query_handler(func=lambda call: True)
def work(call):
    if call.data == "followed":
        #  todo check if subscribe
        if random.randint(1, 2) == 1:
            bot.delete_message(call.message.chat.id, call.message.id)
            markup_reply = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            search_button = telebot.types.KeyboardButton("–ü–æ–∏—Å–∫")
            list_button = telebot.types.KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤")
            markup_reply.add(search_button, list_button)
            bot.send_message(call.message.chat.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!\n"
                                                        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ, "
                                                        "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ!",
                             reply_markup=markup_reply)
        else:
            bot.answer_callback_query(callback_query_id=call.id,
                                      text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!')


@bot.message_handler(content_types=["text"])
def reply_to_request(message):
    #  todo normal search
    if message.text == "–ü–æ–∏—Å–∫":
        bot.send_message(message.chat.id, text="üîé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞.")
    #  todo fkn list of series by deleting message
    elif message.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤":
        bot.send_message(message.chat.id, text="üîé–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ("
                                               "–∞–ª—Ñ–∞–≤–∏—Ç—É).\n\n–ö–∞–∫–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª?")
    elif message.text == "—á–µ–±—É—Ä–∞—à–∫–∞":
        video = open("D:/ITMO/cheburashka.mp4", "rb")
        bot.send_video(message.chat.id, video, timeout=1000, supports_streaming=True)

    elif message.text == "cum":
        bot.send_video(message.chat.id, ID[-1], timeout=1000, supports_streaming=True)

    else:
        bot.send_message(message.chat.id, text="–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π —Å–µ—Ä–∏–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")


@bot.message_handler(content_types=["video"])
def upload_video(message):
    #  todo check if person is admin or not
    ID.append(message.video.file_id)
    print(ID[-1])


if __name__ == "__main__":
    bot.polling()
